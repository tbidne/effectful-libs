---
name: ci

on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - main
      - utils

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  cabal:
    strategy:
      fail-fast: false
      matrix:
        ghc:
          - "9.2.8"
          - "9.4.8"
          - "9.6.5"
          - "9.8.2"
          - "9.10.1"
          - "9.12.1"
        os:
          - "macos-latest"
          - "ubuntu-latest"
          - "windows-latest"
        exclude:
          - { ghc: "8.10.7", os: "macos-latest" }
          - { ghc: "9.0.2", os: "macos-latest" }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Configure
        # yamllint disable rule:line-length
        run: cabal configure --enable-tests --ghc-options='-Wno-deprecations -Werror'
        # yamllint enable

      - name: Build concurrent-effectful
        run: cabal build concurrent-effectful

      - name: Build effectful-utils
        run: cabal build effectful-utils

      - name: Build env-guard-effectful
        run: cabal build env-guard-effectful

      - name: Build environment-effectful
        run: cabal build environment-effectful

      - name: Build fs-effectful
        run: cabal build fs-effectful

      - name: Test fs-effectful
        run: cabal test fs-effectful

      - name: Build ioref-effectful
        run: cabal build ioref-effectful

      - name: Build logger-effectful
        run: cabal build logger-effectful

      - name: Test logger-effectful
        # yamllint disable rule:line-length
        run: cabal test logger-effectful --test-options '--hedgehog-tests 100000'
        # yamllint enable

      - name: Build logger-ns-effectful
        run: cabal build logger-ns-effectful

      - name: Test logger-ns-effectful
        run: cabal test logger-ns-effectful

      - name: Build optparse-effectful
        run: cabal build optparse-effectful

      - name: Build stm-effectful
        run: cabal build stm-effectful

      - name: Build terminal-effectful
        run: cabal build terminal-effectful

      - name: Build time-effectful
        run: cabal build time-effectful

      - name: Test time-effectful
        run: cabal test time-effectful --test-options '--hedgehog-tests 100000'

      - name: Build typed-process-dynamic-effectful
        run: cabal build typed-process-dynamic-effectful

      - name: Build unix-compat-effectful
        run: cabal build unix-compat-effectful

      - name: Test unix-compat-effectful
        run: cabal test unix-compat-effectful

      - name: Build unix-effectful
        if: ${{ matrix.os != 'windows-latest' }}
        run: cabal build unix-effectful

      - name: Test unix-effectful
        if: ${{ matrix.os != 'windows-latest' }}
        run: cabal test unix-effectful

      - name: Benchmark fs-unix
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: bench
        # yamllint disable rule:line-length
        run: |
          cabal bench --enable-benchmarks fs-unix:benchmark:benchmarks --benchmark-options '
            +RTS -T -RTS -t100
            --baseline bench/baseline_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            --csv bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            --svg bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
            --fail-if-slower 30
            --fail-if-faster 30'
        # yamllint enable

      - uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.bench.conclusion == 'failure' }}
        with:
          name: build-artifacts
          path: |
            bench/fs-unix/bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            bench/fs-unix/bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
  nix:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-latest"
          - "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build concurrent-effectful
        run: nix build -Lv .#concurrent-effectful

      - name: Build effectful-utils
        run: nix build -Lv .#effectful-utils

      - name: Build env-guard-effectful
        run: nix build -Lv .#env-guard-effectful

      - name: Build environment-effectful
        run: nix build -Lv .#environment-effectful

      - name: Build fs-effectful
        run: nix build -Lv .#fs-effectful

      - name: Build ioref-effectful
        run: nix build -Lv .#ioref-effectful

      - name: Build logger-effectful
        run: nix build -Lv .#logger-effectful

      - name: Build logger-ns-effectful
        run: nix build -Lv .#logger-ns-effectful

      - name: Build optparse-effectful
        run: nix build -Lv .#optparse-effectful

      - name: Build stm-effectful
        run: nix build -Lv .#stm-effectful

      - name: Build terminal-effectful
        run: nix build -Lv .#terminal-effectful

      - name: Build time-effectful
        run: nix build -Lv .#time-effectful

      - name: Build typed-process-dynamic-effectful
        run: nix build -Lv .#typed-process-dynamic-effectful

      - name: Build unix-compat-effectful
        run: nix build -Lv .#unix-compat-effectful

  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Formatting
        run: |
          nix run .#format
          git diff --exit-code --color=always
